// Generated by https://quicktype.io

namespace Server.Models.Translation
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Translation
    {
        [JsonProperty("ds-translation")]
        public DsTranslation DsTranslation { get; set; }
    }

    public partial class DsTranslation
    {
        [JsonProperty("tt-translation")]
        public TtTranslation[] TtTranslation { get; set; }
    }

    public partial class TtTranslation
    {
        [JsonProperty("system-id")]
        public string SystemId { get; set; }

        [JsonProperty("sd-language")]
        public string SdLanguage { get; set; }

        [JsonProperty("sd-region")]
        public string SdRegion { get; set; }

        [JsonProperty("sd-text")]
        public string SdText { get; set; }

        [JsonProperty("update-by")]
        public string UpdateBy { get; set; }

        [JsonProperty("update-time")]
        public DateTimeOffset? UpdateTime { get; set; }

        [JsonProperty("update-date")]
        public DateTimeOffset? UpdateDate { get; set; }

        [JsonProperty("created-by")]
        public string CreatedBy { get; set; }

        [JsonProperty("created-date")]
        public DateTimeOffset? CreatedDate { get; set; }

        [JsonProperty("reserved-standard")]
        public string ReservedStandard { get; set; }

        [JsonProperty("reserved-custom")]
        public string ReservedCustom { get; set; }

        [JsonProperty("sd-code")]
        public string SdCode { get; set; }

        [JsonProperty("change-reference-num")]
        public double ChangeReferenceNum { get; set; }

        [JsonProperty("layer-code")]
        public string LayerCode { get; set; }

        [JsonProperty("user-or-group-id")]
        public string UserOrGroupId { get; set; }

        [JsonProperty("layer-type")]
        public string LayerType { get; set; }

        [JsonProperty("reserved-free")]
        public string ReservedFree { get; set; }

        [JsonProperty("created-time")]
        public string CreatedTime { get; set; }

        [JsonProperty("reserved-support")]
        public string ReservedSupport { get; set; }

        [JsonProperty("sd-abbreviation")]
        public string SdAbbreviation { get; set; }
    }

    public partial class Translation
    {
        public static Translation FromJson(string json) => JsonConvert.DeserializeObject<Translation>(json, Server.Models.Translation.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Translation self) => JsonConvert.SerializeObject(self, Server.Models.Translation.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
