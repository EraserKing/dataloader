// Generated by https://quicktype.io

namespace Server.Models.Messages
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Messages
    {
        [JsonProperty("ds-messages")]
        public DsMessages DsMessages { get; set; }
    }

    public partial class DsMessages
    {
        [JsonProperty("tt-messages")]
        public TtMessage[] TtMessages { get; set; }
    }

    public partial class TtMessage
    {
        [JsonProperty("system-id")]
        public string SystemId { get; set; }

        [JsonProperty("obj-language")]
        public string ObjLanguage { get; set; }

        [JsonProperty("obj-region")]
        public string ObjRegion { get; set; }

        [JsonProperty("message-number")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MessageNumber { get; set; }

        [JsonProperty("message-description")]
        public string MessageDescription { get; set; }

        [JsonProperty("update-by")]
        public string UpdateBy { get; set; }

        [JsonProperty("update-time")]
        public DateTimeOffset? UpdateTime { get; set; }

        [JsonProperty("update-date")]
        public DateTimeOffset? UpdateDate { get; set; }

        [JsonProperty("created-by")]
        public string CreatedBy { get; set; }

        [JsonProperty("created-date")]
        public DateTimeOffset? CreatedDate { get; set; }

        [JsonProperty("reserved-standard")]
        public string ReservedStandard { get; set; }

        [JsonProperty("reserved-custom")]
        public string ReservedCustom { get; set; }

        [JsonProperty("change-reference-num")]
        public double ChangeReferenceNum { get; set; }

        [JsonProperty("layer-code")]
        public string LayerCode { get; set; }

        [JsonProperty("user-or-group-id")]
        public string UserOrGroupId { get; set; }

        [JsonProperty("layer-type")]
        public string LayerType { get; set; }

        [JsonProperty("reserved-free")]
        public string ReservedFree { get; set; }

        [JsonProperty("created-time")]
        public string CreatedTime { get; set; }

        [JsonProperty("reserved-support")]
        public string ReservedSupport { get; set; }

        [JsonProperty("message-type")]
        public string MessageType { get; set; }
    }

    public partial class Message
    {
        public static Message FromJson(string json) => JsonConvert.DeserializeObject<Message>(json, Server.Models.Messages.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Message self) => JsonConvert.SerializeObject(self, Server.Models.Messages.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
